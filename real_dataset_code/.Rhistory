K <- 5000
mBeta <- t(rmvnorm(K, vmu_til, sigma=mSigma_til))
vB <- (XTy[j] - XTX[j,-j]%*%mBeta[-j,])
for (i in 1:K) {
sigma2 <- rinvgamma(1, shape=a_til, rate=b_til)
sigma  <- sqrt(sigma2)
A <-  XTX[j,j]/sigma2
B <-  vB[i]/sigma2
B <- as.vector(B)
C <- -lambda/sigma
y <- y + dlasso(x,A,B,C)
}
y <- y/K
return(list(x=x,y=y))
}
vb_phc_grad <- function(x, a_til, b_til, vmu_til, mSigma_til, XTX, XTy, lambda, j )
{
vs <- vmu_til[-j] - mSigma_til[-j,j]*vmu_til[j]/mSigma_til[j,j]
vt <- mSigma_til[-j,j]/mSigma_til[j,j]
c0 <- (a_til/b_til)*(XTy[j] - XTX[j,-j]%*%vs)
c1 <- (a_til/b_til)*(XTX[j,j] + XTX[j,-j]%*%vt)
c2 <- lambda*exp(lgamma(a_til + 1/2) - lgamma(a_til) - 0.5*log(b_til))
c0 <- as.vector(c0)
c1 <- as.vector(c1)
c2 <- as.vector(c2)
cat("c0=",c0,"\n")
cat("c1=",c1,"\n")
cat("c2=",c2,"\n")
y <- d_oldlasso(x,c1,c0,-c2)
return(list(x=x,y=y))
}
vb_phc_grad2 <- function(x, E_sigma2inv, E_sigmainv, vmu_til, mSigma_til, XTX, XTy, lambda, j )
{
vs <- vmu_til[-j] - mSigma_til[-j,j]*vmu_til[j]/mSigma_til[j,j]
vt <- mSigma_til[-j,j]/mSigma_til[j,j]
c0 <- E_sigma2inv*(XTy[j] - XTX[j,-j]%*%vs)
c1 <- E_sigma2inv*(XTX[j,j] + XTX[j,-j]%*%vt)
c2 <- lambda*E_sigmainv
c0 <- as.vector(c0)
c1 <- as.vector(c1)
c2 <- as.vector(c2)
y <- d_oldlasso(x,c1,c0,-c2)
return(list(x=x,y=y))
}
source(here("code","local_global_algorithms.R"))
time_LG1 <- system.time({
res_LG1 = local_global_algorithm_1(vy, mX, lambda, res_mfvb)
})
source(here("code","local_global_algorithms.R"))
time_LG2 <- system.time({
res_LG2 = local_global_algorithm_2(vy, mX, lambda, res_mfvb)
})
library(here)
library(pracma)
library(tmvtnorm)
library(cubature)
source(here("code","lasso_distribution","Multi-Lasso.R"))
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
Z = zmlasso(A,b,c)
Z
fun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*(abs(y)))))
}
xmin <- -Inf; xmax <- Inf
ymin <- -Inf; ymax <- Inf
# Normalizing constant
dblquad(fun, xmin, xmax, ymin, ymax)
# integral2(fun, xmin, xmax, ymin, ymax)
lower = 0
upper = Inf
A_inv = solve(A)
Sigma1 = A_inv
mu1 = A_inv%*%(b-c)
Sigma1 = A_inv
mom.mtruncnorm(powers = 1, mu1, Sigma1, rep(lower,2), rep(upper,2))$cum1
mom.mtruncnorm(powers = 2, mu1, Sigma1, rep(lower,2), rep(upper,2))$order2$m2
res = mtmvnorm(mean=as.vector(mu1), sigma=Sigma1,lower=rep(lower,2), upper=rep(upper,2))
print(res$tmean)
res$tvar + res$tmean %*% t(res$tmean)
Z = zmlasso(A,b,c)
xmin <- 0; xmax <- Inf
ymin <- 0; ymax <- Inf
xfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
A_inv = solve(A)
mu1 = A_inv%*%(b-c)
k = -0.5*((x-mu1[1])^2 * A[1,1] + A[1,2]*A[2,1]*(x-mu1[1])*(y-mu1[2]) + (y-mu1[2])^2*A[2,2])
q = (b[1]-c)*x + (b[2]-c)*y
# vx = matrix(c(x,y))
value = x*exp(k + q)
# value = exp(-0.5*t(vx-mu1)%*%A%*%(vx-mu1) + 0.5*(t(mu1)%*%solve(A)%*%mu1))
# value = exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*x-c*(y)))
return(value)
}
yfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
A_inv = solve(A)
mu1 = A_inv%*%(b-c)
k = -0.5*((x-mu1[1])^2 * A[1,1] + A[1,2]*A[2,1]*(x-mu1[1])*(y-mu1[2]) + (y-mu1[2])^2*A[2,2])
q = (b[1]-c)*x + (b[2]-c)*y
# vx = matrix(c(x,y))
value = y*exp(k+q)
# value = exp(-0.5*t(vx-mu1)%*%A%*%(vx-mu1) + 0.5*(t(mu1)%*%solve(A)%*%mu1))
# value = exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*x-c*(y)))
return(value)
}
print(dblquad(xfun, xmin, xmax, ymin, ymax)/Z)
print(dblquad(yfun, xmin, xmax, ymin, ymax))
xmin <- -Inf; xmax <- 0
ymin <- 0; ymax <- Inf
print(dblquad(xfun, xmin, xmax, ymin, ymax))
print(dblquad(yfun, xmin, xmax, ymin, ymax))
xmin <- 0; xmax <- Inf
ymin <- 0; ymax <- Inf
actual_xfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_yfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(y*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
# Expectation
vx = c()
vy = c()
vx[1] = dblquad(actual_xfun, xmin, xmax, ymin, ymax)
vy[1] = dblquad(actual_yfun, xmin, xmax, ymin, ymax)
print(c(vx[1],vy[1]))
# integral2(fun, xmin, xmax, ymin, ymax)
xmin <- -Inf; xmax <- 0
ymin <- 0; ymax <- Inf
vx[2]= dblquad(actual_xfun, xmin, xmax, ymin, ymax)
vy[2]= dblquad(actual_yfun, xmin, xmax, ymin, ymax)
print(c(vx[2],vy[2]))
xmin <- 0; xmax <- Inf
ymin <- -Inf; ymax <- 0
vx[3] = dblquad(actual_xfun, xmin, xmax, ymin, ymax)
vy[3] = dblquad(actual_yfun, xmin, xmax, ymin, ymax)
print(c(vx[3],vy[3]))
xmin <- -Inf; xmax <- 0
ymin <- -Inf; ymax <- 0
vx[4]= dblquad(actual_xfun, xmin, xmax, ymin, ymax)
vy[4] = dblquad(actual_yfun, xmin, xmax, ymin, ymax)
print(c(vx[4],vy[4]))
print(c(sum(vx), sum(vy)))
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
emlasso(A,b,c)
xmin <- -Inf; xmax <- Inf
ymin <- -Inf; ymax <- Inf
actual_xfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_yfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(y*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
# Expectation
vx = c()
vy = c()
final1 = dblquad(actual_xfun, xmin, xmax, ymin, ymax)
final2 = dblquad(actual_yfun, xmin, xmax, ymin, ymax)
print(c(final1,final2)/Z)
A = matrix(c(4,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
Z = zmlasso(A,b,c)
vmlasso(A,b,c)
xmin <- -Inf; xmax <- Inf
ymin <- -Inf; ymax <- Inf
actual_xfun <- function(x,y)
{
A = matrix(c(4,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x^2*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_yfun <- function(x,y)
{
A = matrix(c(4,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(y^2*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_xyfun <- function(x,y)
{
A = matrix(c(4,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x*y*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
# Expectation
vx = c()
vy = c()
x2 = dblquad(actual_xfun, xmin, xmax, ymin, ymax)/Z
y2 = dblquad(actual_yfun, xmin, xmax, ymin, ymax)/Z
xy = dblquad(actual_xyfun, xmin, xmax, ymin, ymax)/Z
ex2 = matrix(c(x2,xy,xy,y2),2,2)
print(ex2)
print(ex2 - emlasso(A,b,c) %*% t(emlasso(A,b,c)))
A = matrix(c(5,2,2,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
Z = zmlasso(A,b,c)
vmlasso(A,b,c)
xmin <- -Inf; xmax <- Inf
ymin <- -Inf; ymax <- Inf
actual_xfun <- function(x,y)
{
A = matrix(c(5,2,2,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x^2*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_yfun <- function(x,y)
{
A = matrix(c(5,2,2,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(y^2*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_xyfun <- function(x,y)
{
A = matrix(c(5,2,2,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x*y*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
# Expectation
vx = c()
vy = c()
x2 = dblquad(actual_xfun, xmin, xmax, ymin, ymax)/Z
y2 = dblquad(actual_yfun, xmin, xmax, ymin, ymax)/Z
xy = dblquad(actual_xyfun, xmin, xmax, ymin, ymax)/Z
ex2 = matrix(c(x2,xy,xy,y2),2,2)
print(ex2)
print(ex2 - emlasso(A,b,c) %*% t(emlasso(A,b,c)))
xmin <- -Inf; xmax <- Inf
ymin <- -Inf; ymax <- Inf
actual_xfun <- function(x,y)
{
A = matrix(c(5,-2,-2,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x^2*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_yfun <- function(x,y)
{
A = matrix(c(5,-2,-2,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(y^2*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_xyfun <- function(x,y)
{
A = matrix(c(5,-2,-2,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x*y*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
# Expectation
vx = c()
vy = c()
x2 = dblquad(actual_xfun, xmin, xmax, ymin, ymax)/Z
y2 = dblquad(actual_yfun, xmin, xmax, ymin, ymax)/Z
xy = dblquad(actual_xyfun, xmin, xmax, ymin, ymax)/Z
ex2 = matrix(c(x2,xy,xy,y2),2,2)
print(ex2)
print(ex2 - emlasso(A,b,c) %*% t(emlasso(A,b,c)))
A = matrix(c(5,-2,-2,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
Z = zmlasso(A,b,c)
vmlasso(A,b,c)
xmin <- -Inf; xmax <- Inf
ymin <- -Inf; ymax <- Inf
actual_xfun <- function(x,y)
{
A = matrix(c(5,-2,-2,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x^2*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_yfun <- function(x,y)
{
A = matrix(c(5,-2,-2,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(y^2*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_xyfun <- function(x,y)
{
A = matrix(c(5,-2,-2,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x*y*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
# Expectation
vx = c()
vy = c()
x2 = dblquad(actual_xfun, xmin, xmax, ymin, ymax)/Z
y2 = dblquad(actual_yfun, xmin, xmax, ymin, ymax)/Z
xy = dblquad(actual_xyfun, xmin, xmax, ymin, ymax)/Z
ex2 = matrix(c(x2,xy,xy,y2),2,2)
print(ex2)
print(ex2 - emlasso(A,b,c) %*% t(emlasso(A,b,c)))
A = matrix(c(5,-2,-2,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
Z = zmlasso(A,b,c)
vmlasso(A,b,c)
knitr::opts_chunk$set(echo = TRUE)
cat("BEM running time = ",time_bem[3],"s")
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(glmnet)
library(dplyr)
library(tidyr)
library(here)
Hitters = na.omit(Hitters)
str(Hitters)
x = model.matrix(Salary~., Hitters)[,-1] # trim off the first column
# leaving only the predictors
y = Hitters %>%
select(Salary) %>%
unlist() %>%
as.numeric()
summary(Hitters)
dataset_name <- "Hitters"
vy <- (y - mean(y))/sd(y)
mX <- scale(x, center = TRUE, scale = TRUE)
n <- nrow(mX)
p <- ncol(mX)
source(here("code","bayesian_lasso_gibbs.R"))
nburn <- 5000
nkeep <- 5000
nsamples <- nburn + nkeep
lambda_prior <- list(lambda_start=1, prior="gamma",u=1,v=1)
res_gibbs <- bayesian_lasso_gibbs(vy, mX, lambda=lambda_prior, nsamples=nsamples)
lambda2 <- mean( res_gibbs$vlambda2 )
lambda <- sqrt(lambda2)
lambda2 <- quantile(res_gibbs$vlambda2, probs=0.5)
lambda <- sqrt(lambda2)
lambda
plot(density(res_gibbs$vlambda2))
source(here("code","bayesian_em_lasso.R"))
time_bem <- system.time({
res_bem <-
bayesian_lasso_em(vy,
mX,
lambda = lambda,
vbeta_init = rep(0,p),
sigma2_init = 1,
VERBOSE=FALSE)
})
res_lm <- lm(vy~-1+mX)
vbeta_lm <- matrix(res_lm$coef,p,1)
sigma2_lm <- sum((vy - mX%*%vbeta_lm)^2)/n
lambda_glmnet <- 2*n*lambda*sqrt(res_bem$sigma2)
lasso_mod = glmnet(mX,
vy,
alpha = 1,
lambda = lambda_glmnet) # Fit lasso model on training data
source(here("code","bayesian_lasso_gibbs.R"))
nburn <- 5000
nkeep <- 1000000
nsamples <- nburn + nkeep
lambda_prior <- lambda
library(profvis)
if(file.exists(paste("res_gibbs",dataset_name,".Rdata",sep="")))
{
load(paste("res_gibbs",dataset_name,".Rdata",sep=""))
}else
{
time_gibbs2 <- system.time({
res_gibbs <- bayesian_lasso_gibbs(vy, mX, lambda=lambda_prior, nsamples=nsamples)
})
save.image(paste("res_gibbs",dataset_name,".Rdata",sep=""))
}
source(here("code","bayesian_lasso_mfvb.R"))
time_mfvb <- system.time({
res_mfvb <- bayesian_lasso_mfvb(vy, mX, lambda, 1)
})
source(here("code","lasso_distribution","dlasso.R"))
trapint <- function(xgrid, fgrid)
{
ng <- length(xgrid)
xvec <- xgrid[2:ng] - xgrid[1:(ng - 1)]
fvec <- fgrid[1:(ng - 1)] + fgrid[2:ng]
integ <- sum(xvec * fvec)/2
return(integ)
}
vb_phc <- function(mu, sigma, N, nsd, a_til, b_til, vmu_til, mSigma_til, XTX, XTy, lambda, j )
{
x <- seq(mu - nsd*sigma, mu + nsd*sigma, length=N)
y <- 0*x
lambda2 <- lambda*lambda
mQ <- solve(XTX + lambda2*res_mfvb$vd, tol=1.0E-99)
vmu <- mQ%*%XTy
m  <- XTy[j] - XTX[j,-j]%*%vmu[-j]
s2 <- XTX[j,-j]%*%mQ[-j,-j]%*%XTX[-j,j]
s  <- sqrt(s2)
m  <- as.vector(m)
s2 <- as.vector(s2)
s  <- as.vector(s)
K <- 5000
mBeta <- t(rmvnorm(K, vmu_til, sigma=mSigma_til))
vB <- (XTy[j] - XTX[j,-j]%*%mBeta[-j,])
for (i in 1:K) {
sigma2 <- rinvgamma(1, shape=a_til, rate=b_til)
sigma  <- sqrt(sigma2)
A <-  XTX[j,j]/sigma2
B <-  vB[i]/sigma2
B <- as.vector(B)
C <- -lambda/sigma
y <- y + dlasso(x,A,B,C)
}
y <- y/K
return(list(x=x,y=y))
}
vb_phc_grad <- function(x, a_til, b_til, vmu_til, mSigma_til, XTX, XTy, lambda, j )
{
vs <- vmu_til[-j] - mSigma_til[-j,j]*vmu_til[j]/mSigma_til[j,j]
vt <- mSigma_til[-j,j]/mSigma_til[j,j]
c0 <- (a_til/b_til)*(XTy[j] - XTX[j,-j]%*%vs)
c1 <- (a_til/b_til)*(XTX[j,j] + XTX[j,-j]%*%vt)
c2 <- lambda*exp(lgamma(a_til + 1/2) - lgamma(a_til) - 0.5*log(b_til))
c0 <- as.vector(c0)
c1 <- as.vector(c1)
c2 <- as.vector(c2)
cat("c0=",c0,"\n")
cat("c1=",c1,"\n")
cat("c2=",c2,"\n")
y <- d_oldlasso(x,c1,c0,-c2)
return(list(x=x,y=y))
}
vb_phc_grad2 <- function(x, E_sigma2inv, E_sigmainv, vmu_til, mSigma_til, XTX, XTy, lambda, j )
{
vs <- vmu_til[-j] - mSigma_til[-j,j]*vmu_til[j]/mSigma_til[j,j]
vt <- mSigma_til[-j,j]/mSigma_til[j,j]
c0 <- E_sigma2inv*(XTy[j] - XTX[j,-j]%*%vs)
c1 <- E_sigma2inv*(XTX[j,j] + XTX[j,-j]%*%vt)
c2 <- lambda*E_sigmainv
c0 <- as.vector(c0)
c1 <- as.vector(c1)
c2 <- as.vector(c2)
y <- d_oldlasso(x,c1,c0,-c2)
return(list(x=x,y=y))
}
source(here("code","local_global_algorithms.R"))
time_LG1 <- system.time({
res_LG1 = local_global_algorithm_1(vy, mX, lambda, res_mfvb)
})
source(here("code","local_global_algorithms.R"))
time_LG2 <- system.time({
res_LG2 = local_global_algorithm_2(vy, mX, lambda, res_mfvb)
})
source(here("code","local_global_algorithms.R"))
time_LG2 <- system.time({
res_LG2 = local_global_algorithm_2(vy, mX, lambda, res_mfvb)
})
source(here("code","local_global_algorithms.R"))
time_LG2 <- system.time({
res_LG2 = local_global_algorithm_2(vy, mX, lambda, res_mfvb)
})
source(here("code","local_global_algorithms.R"))
time_LG2 <- system.time({
res_LG2 = local_global_algorithm_2(vy, mX, lambda, res_mfvb)
})
source(here("code","local_global_algorithms.R"))
time_LG2 <- system.time({
res_LG2 = local_global_algorithm_2(vy, mX, lambda, res_mfvb)
})
source(here("code","local_global_algorithms.R"))
time_LG2 <- system.time({
res_LG2 = local_global_algorithm_2(vy, mX, lambda, res_mfvb)
})
source(here("code","local_global_algorithms.R"))
time_LG2 <- system.time({
res_LG2 = local_global_algorithm_2(vy, mX, lambda, res_mfvb)
})
