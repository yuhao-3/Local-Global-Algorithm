library(here)ll
library(here)
library(pracma)
library(tmvtnorm)
install.packages("tmvtnorm\")
)
\
install.packages("tmvtnorm")
library(here)
library(pracma)
library(tmvtnorm)
source(here("code","lasso_distribution","Multi-Lasso.R"))
A = matrix(c(2,2,2,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
Z = zmlasso(A,b,c)
Z
library(here)
library(pracma)
library(tmvtnorm)
source(here("code","lasso_distribution","Multi-Lasso.R"))
A = matrix(c(2,2,2,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
Z = zmlasso(A,b,c)
Z
fun <- function(x,y)
{
A = matrix(c(2,2,2,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*(abs(y)))))
}
xmin <- 0; xmax <- Inf
ymin <- 0; ymax <- Inf
actual_xfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_yfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(y*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
# Expectation
vx = c()
vy = c()
vx[1] = dblquad(actual_fun, xmin, xmax, ymin, ymax)
install.packages("cubature")
library(here)
library(pracma)
library(tmvtnorm)
library(cubature)
source(here("code","lasso_distribution","Multi-Lasso.R"))
A = matrix(c(2,2,2,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
Z = zmlasso(A,b,c)
Z
xmin <- 0; xmax <- Inf
ymin <- 0; ymax <- Inf
actual_xfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_yfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(y*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
# Expectation
vx = c()
vy = c()
vx[1] = dblquad(actual_xfun, xmin, xmax, ymin, ymax)
vy[1] = dblquad(actual_yfun, xmin, xmax, ymin, ymax)
print(c(vx[1],vy[1]))
# integral2(fun, xmin, xmax, ymin, ymax)
lower = 0
upper = Inf
mu1 = A_inv%*%(b-c)
lower = 0
upper = Inf
A_inv = solve(A)
mu1 = A_inv%*%(b-c)
Sigma1 = A_inv
mom.mtruncnorm(powers = 1, mu1, Sigma1, rep(lower,2), rep(upper,2))$cum1
mtmvnorm(mean=mu1, sigma=Sigma1,lower=lower, upper=upper)
mtmvnorm(mean=as.vector(mu1), sigma=Sigma1,lower=lower, upper=upper)
mtmvnorm(mean=as.vector(mu1), sigma=Sigma1,lower=rep(lower,2), upper=rep(upper,2))
mtmvnorm(mean=as.vector(mu4), sigma=Sigma1,lower=rep(lower,2), upper=rep(upper,2))
mtmvnorm(mean=as.vector(mu1), sigma=Sigma1,lower=rep(lower,2), upper=rep(upper,2))
xmin <- 0; xmax <- Inf
ymin <- 0; ymax <- Inf
fun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
A_inv = solve(A)
mu1 = A_inv%*%(b-c)
Amu = A%*%mu1
k = -0.5*((x-mu1[1])^2 * A[1,1] + A[1,2]*A[2,1]*(x-mu1[1])*(y-mu1[2]) + (y-mu1[2])^2*A[2,2])
# vx = matrix(c(x,y))
value = exp(k)
# value = exp(-0.5*t(vx-mu1)%*%A%*%(vx-mu1) + 0.5*(t(mu1)%*%solve(A)%*%mu1))
# value = exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*x-c*(y)))
return(value)
}
dblquad(fun, xmin, xmax, ymin, ymax)
xmin <- 0; xmax <- Inf
ymin <- 0; ymax <- Inf
fun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
A_inv = solve(A)
mu1 = A_inv%*%(b-c)
Amu = A%*%mu1
k = -0.5*((x-mu1[1])^2 * A[1,1] + A[1,2]*A[2,1]*(x-mu1[1])*(y-mu1[2]) + (y-mu1[2])^2*A[2,2])
# vx = matrix(c(x,y))
value = x*exp(k)
# value = exp(-0.5*t(vx-mu1)%*%A%*%(vx-mu1) + 0.5*(t(mu1)%*%solve(A)%*%mu1))
# value = exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*x-c*(y)))
return(value)
}
dblquad(fun, xmin, xmax, ymin, ymax)
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
emlasso(A,b,c)
mtmvnorm(c(0,0),diag(2),rep(0,2),rep(Inf,2)ï¼‰
mtmvnorm(c(0,0),diag(2),rep(0,2),rep(Inf,2))
lower = 0
upper = Inf
A_inv = solve(A)
mu1 = A_inv%*%(b-c)
Sigma1 = A_inv
mom.mtruncnorm(powers = 1, mu1, Sigma1, rep(lower,2), rep(upper,2))$cum1
xmin <- 0; xmax <- Inf
ymin <- 0; ymax <- Inf
actual_xfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_yfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(y*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
# Expectation
vx = c()
vy = c()
vx[1] = dblquad(actual_xfun, xmin, xmax, ymin, ymax)
vy[1] = dblquad(actual_yfun, xmin, xmax, ymin, ymax)
print(c(vx[1],vy[1]))
# integral2(fun, xmin, xmax, ymin, ymax)
lower = 0
upper = Inf
A_inv = solve(A)
mu1 = A_inv%*%(b-c)
Sigma1 = A_inv
mom.mtruncnorm(powers = 1, mu1, Sigma1, rep(lower,2), rep(upper,2))$cum1
mtmvnorm(mean=as.vector(mu1), sigma=Sigma1,lower=rep(lower,2), upper=rep(upper,2))
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
emlasso(A,b,c)
xmin <- 0; xmax <- Inf
ymin <- 0; ymax <- Inf
xfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
A_inv = solve(A)
mu1 = A_inv%*%(b-c)
Amu = A%*%mu1
k = -0.5*((x-mu1[1])^2 * A[1,1] + A[1,2]*A[2,1]*(x-mu1[1])*(y-mu1[2]) + (y-mu1[2])^2*A[2,2])
# vx = matrix(c(x,y))
value = x*exp(k)
# value = exp(-0.5*t(vx-mu1)%*%A%*%(vx-mu1) + 0.5*(t(mu1)%*%solve(A)%*%mu1))
# value = exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*x-c*(y)))
return(value)
}
yfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
A_inv = solve(A)
mu1 = A_inv%*%(b-c)
Amu = A%*%mu1
k = -0.5*((x-mu1[1])^2 * A[1,1] + A[1,2]*A[2,1]*(x-mu1[1])*(y-mu1[2]) + (y-mu1[2])^2*A[2,2])
# vx = matrix(c(x,y))
value = y*exp(k)
# value = exp(-0.5*t(vx-mu1)%*%A%*%(vx-mu1) + 0.5*(t(mu1)%*%solve(A)%*%mu1))
# value = exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*x-c*(y)))
return(value)
}
print(dblquad(xfun, xmin, xmax, ymin, ymax))
print(dblquad(yfun, xmin, xmax, ymin, ymax))
xmin <- -Inf; xmax <- 0
ymin <- 0; ymax <- Inf
print(dblquad(xfun, xmin, xmax, ymin, ymax))
print(dblquad(yfun, xmin, xmax, ymin, ymax))
xmin <- 0; xmax <- Inf
ymin <- 0; ymax <- Inf
actual_xfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_yfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(y*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
# Expectation
vx = c()
vy = c()
vx[1] = dblquad(actual_xfun, xmin, xmax, ymin, ymax)
vy[1] = dblquad(actual_yfun, xmin, xmax, ymin, ymax)
print(c(vx[1],vy[1]))
# integral2(fun, xmin, xmax, ymin, ymax)
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
emlasso(A,b,c)
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
emlasso(A,b,c)
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
emlasso(A,b,c)
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
emlasso(A,b,c)
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
emlasso(A,b,c)
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
emlasso(A,b,c)
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
emlasso(A,b,c)
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
emlasso(A,b,c)
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
emlasso(A,b,c)
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
emlasso(A,b,c)
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
emlasso(A,b,c)
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
emlasso(A,b,c)
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
emlasso(A,b,c)
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
emlasso(A,b,c)
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
emlasso(A,b,c)
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
emlasso(A,b,c)
