vmlasso(A,b,c)
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
Z = zmlasso(A,b,c)
vmlasso(A,b,c)
xmin <- -Inf; xmax <- Inf
ymin <- -Inf; ymax <- Inf
actual_xfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x^2*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_yfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(y^2*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_xyfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x*y*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
# Expectation
vx = c()
vy = c()
x2 = dblquad(actual_xfun, xmin, xmax, ymin, ymax)/Z
y2 = dblquad(actual_yfun, xmin, xmax, ymin, ymax)/Z
xy = dblquad(actual_xyfun, xmin, xmax, ymin, ymax)/Z
ex2 = matrix(c(x2,xy,xy,y2),2,2)
ex2
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
emlasso(A,b,c)
xmin <- -Inf; xmax <- Inf
ymin <- -Inf; ymax <- Inf
actual_xfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_yfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(y*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
# Expectation
vx = c()
vy = c()
mu1 = dblquad(actual_xfun, xmin, xmax, ymin, ymax)
mu2 = dblquad(actual_yfun, xmin, xmax, ymin, ymax)
print(c(final1,final2)/Z)
xmin <- -Inf; xmax <- Inf
ymin <- -Inf; ymax <- Inf
actual_xfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_yfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(y*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
# Expectation
vx = c()
vy = c()
final1 = dblquad(actual_xfun, xmin, xmax, ymin, ymax)
final2 = dblquad(actual_yfun, xmin, xmax, ymin, ymax)
print(c(final1,final2)/Z)
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
Z = zmlasso(A,b,c)
vmlasso(A,b,c)
xmin <- -Inf; xmax <- Inf
ymin <- -Inf; ymax <- Inf
actual_xfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x^2*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_yfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(y^2*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_xyfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x*y*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
# Expectation
vx = c()
vy = c()
x2 = dblquad(actual_xfun, xmin, xmax, ymin, ymax)/Z
y2 = dblquad(actual_yfun, xmin, xmax, ymin, ymax)/Z
xy = dblquad(actual_xyfun, xmin, xmax, ymin, ymax)/Z
ex2 = matrix(c(x2,xy,xy,y2),2,2)
ex2
library(here)
library(pracma)
library(tmvtnorm)
library(cubature)
source(here("code","lasso_distribution","Multi-Lasso.R"))
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
Z = zmlasso(A,b,c)
Z
fun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*(abs(y)))))
}
xmin <- -Inf; xmax <- Inf
ymin <- -Inf; ymax <- Inf
# Normalizing constant
dblquad(fun, xmin, xmax, ymin, ymax)
# integral2(fun, xmin, xmax, ymin, ymax)
lower = 0
upper = Inf
A_inv = solve(A)
Sigma1 = A_inv
mu1 = A_inv%*%(b-c)
Sigma1 = A_inv
mom.mtruncnorm(powers = 1, mu1, Sigma1, rep(lower,2), rep(upper,2))$cum1
mtmvnorm(mean=as.vector(mu1), sigma=Sigma1,lower=rep(lower,2), upper=rep(upper,2))
Z = zmlasso(A,b,c)
xmin <- 0; xmax <- Inf
ymin <- 0; ymax <- Inf
xfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
A_inv = solve(A)
mu1 = A_inv%*%(b-c)
k = -0.5*((x-mu1[1])^2 * A[1,1] + A[1,2]*A[2,1]*(x-mu1[1])*(y-mu1[2]) + (y-mu1[2])^2*A[2,2])
q = (b[1]-c)*x + (b[2]-c)*y
# vx = matrix(c(x,y))
value = x*exp(k + q)
# value = exp(-0.5*t(vx-mu1)%*%A%*%(vx-mu1) + 0.5*(t(mu1)%*%solve(A)%*%mu1))
# value = exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*x-c*(y)))
return(value)
}
yfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
A_inv = solve(A)
mu1 = A_inv%*%(b-c)
k = -0.5*((x-mu1[1])^2 * A[1,1] + A[1,2]*A[2,1]*(x-mu1[1])*(y-mu1[2]) + (y-mu1[2])^2*A[2,2])
q = (b[1]-c)*x + (b[2]-c)*y
# vx = matrix(c(x,y))
value = y*exp(k+q)
# value = exp(-0.5*t(vx-mu1)%*%A%*%(vx-mu1) + 0.5*(t(mu1)%*%solve(A)%*%mu1))
# value = exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*x-c*(y)))
return(value)
}
print(dblquad(xfun, xmin, xmax, ymin, ymax)/Z)
print(dblquad(yfun, xmin, xmax, ymin, ymax))
xmin <- -Inf; xmax <- 0
ymin <- 0; ymax <- Inf
print(dblquad(xfun, xmin, xmax, ymin, ymax))
print(dblquad(yfun, xmin, xmax, ymin, ymax))
xmin <- 0; xmax <- Inf
ymin <- 0; ymax <- Inf
actual_xfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_yfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(y*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
# Expectation
vx = c()
vy = c()
vx[1] = dblquad(actual_xfun, xmin, xmax, ymin, ymax)
vy[1] = dblquad(actual_yfun, xmin, xmax, ymin, ymax)
print(c(vx[1],vy[1]))
# integral2(fun, xmin, xmax, ymin, ymax)
xmin <- -Inf; xmax <- 0
ymin <- 0; ymax <- Inf
vx[2]= dblquad(actual_xfun, xmin, xmax, ymin, ymax)
vy[2]= dblquad(actual_yfun, xmin, xmax, ymin, ymax)
print(c(vx[2],vy[2]))
xmin <- 0; xmax <- Inf
ymin <- -Inf; ymax <- 0
vx[3] = dblquad(actual_xfun, xmin, xmax, ymin, ymax)
vy[3] = dblquad(actual_yfun, xmin, xmax, ymin, ymax)
print(c(vx[3],vy[3]))
xmin <- -Inf; xmax <- 0
ymin <- -Inf; ymax <- 0
vx[4]= dblquad(actual_xfun, xmin, xmax, ymin, ymax)
vy[4] = dblquad(actual_yfun, xmin, xmax, ymin, ymax)
print(c(vx[4],vy[4]))
print(c(sum(vx), sum(vy)))
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
emlasso(A,b,c)
xmin <- -Inf; xmax <- Inf
ymin <- -Inf; ymax <- Inf
actual_xfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_yfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(y*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
# Expectation
vx = c()
vy = c()
final1 = dblquad(actual_xfun, xmin, xmax, ymin, ymax)
final2 = dblquad(actual_yfun, xmin, xmax, ymin, ymax)
print(c(final1,final2)/Z)
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
Z = zmlasso(A,b,c)
vmlasso(A,b,c)
xmin <- -Inf; xmax <- Inf
ymin <- -Inf; ymax <- Inf
actual_xfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x^2*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_yfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(y^2*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_xyfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x*y*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
# Expectation
vx = c()
vy = c()
x2 = dblquad(actual_xfun, xmin, xmax, ymin, ymax)/Z
y2 = dblquad(actual_yfun, xmin, xmax, ymin, ymax)/Z
xy = dblquad(actual_xyfun, xmin, xmax, ymin, ymax)/Z
ex2 = matrix(c(x2,xy,xy,y2),2,2)
ex2
xmin <- -Inf; xmax <- Inf
ymin <- -Inf; ymax <- Inf
actual_xfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x^2*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_yfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(y^2*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_xyfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x*y*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
# Expectation
vx = c()
vy = c()
x2 = dblquad(actual_xfun, xmin, xmax, ymin, ymax)
y2 = dblquad(actual_yfun, xmin, xmax, ymin, ymax)
xy = dblquad(actual_xyfun, xmin, xmax, ymin, ymax)
ex2 = matrix(c(x2,xy,xy,y2),2,2)
ex2
xmin <- -Inf; xmax <- Inf
ymin <- -Inf; ymax <- Inf
actual_xfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x^2*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_yfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(y^2*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_xyfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x*y*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
# Expectation
vx = c()
vy = c()
x2 = dblquad(actual_xfun, xmin, xmax, ymin, ymax)/Z
y2 = dblquad(actual_yfun, xmin, xmax, ymin, ymax)/Z
xy = dblquad(actual_xyfun, xmin, xmax, ymin, ymax)/Z
ex2 = matrix(c(x2,xy,xy,y2),2,2)
ex2
mtmvnorm(mean=as.vector(mu1), sigma=Sigma1,lower=rep(lower,2), upper=rep(upper,2))
lower = 0
upper = Inf
A_inv = solve(A)
Sigma1 = A_inv
mu1 = A_inv%*%(b-c)
Sigma1 = A_inv
mom.mtruncnorm(powers = 1, mu1, Sigma1, rep(lower,2), rep(upper,2))$cum1
mtmvnorm(mean=as.vector(mu1), sigma=Sigma1,lower=rep(lower,2), upper=rep(upper,2))
res = mtmvnorm(mean=as.vector(mu1), sigma=Sigma1,lower=rep(lower,2), upper=rep(upper,2))
res$tvar - res$tmean %*% t(res$tmean)
lower = 0
upper = Inf
A_inv = solve(A)
Sigma1 = A_inv
mu1 = A_inv%*%(b-c)
Sigma1 = A_inv
mom.mtruncnorm(powers = 1, mu1, Sigma1, rep(lower,2), rep(upper,2))$cum1
mom.mtruncnorm(powers = 2, mu1, Sigma1, rep(lower,2), rep(upper,2))$order2$cum2
res = mtmvnorm(mean=as.vector(mu1), sigma=Sigma1,lower=rep(lower,2), upper=rep(upper,2))
res$tvar + res$tmean %*% t(res$tmean)
res = mtmvnorm(mean=as.vector(mu1), sigma=Sigma1,lower=rep(lower,2), upper=rep(upper,2))
print(res$tmean)
res$tvar + res$tmean %*% t(res$tmean)
?mom.mtruncnorm
lower = 0
upper = Inf
A_inv = solve(A)
Sigma1 = A_inv
mu1 = A_inv%*%(b-c)
Sigma1 = A_inv
mom.mtruncnorm(powers = 1, mu1, Sigma1, rep(lower,2), rep(upper,2))$cum1
mom.mtruncnorm(powers = 2, mu1, Sigma1, rep(lower,2), rep(upper,2))$order2$cum1
lower = 0
upper = Inf
A_inv = solve(A)
Sigma1 = A_inv
mu1 = A_inv%*%(b-c)
Sigma1 = A_inv
mom.mtruncnorm(powers = 1, mu1, Sigma1, rep(lower,2), rep(upper,2))$cum1
mom.mtruncnorm(powers = 2, mu1, Sigma1, rep(lower,2), rep(upper,2))$order2
lower = 0
upper = Inf
A_inv = solve(A)
Sigma1 = A_inv
mu1 = A_inv%*%(b-c)
Sigma1 = A_inv
mom.mtruncnorm(powers = 1, mu1, Sigma1, rep(lower,2), rep(upper,2))$cum1
mom.mtruncnorm(powers = 2, mu1, Sigma1, rep(lower,2), rep(upper,2))$m2
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
Z = zmlasso(A,b,c)
vmlasso(A,b,c)
xmin <- -Inf; xmax <- Inf
ymin <- -Inf; ymax <- Inf
actual_xfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x^2*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_yfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(y^2*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_xyfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x*y*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
# Expectation
vx = c()
vy = c()
x2 = dblquad(actual_xfun, xmin, xmax, ymin, ymax)/Z
y2 = dblquad(actual_yfun, xmin, xmax, ymin, ymax)/Z
xy = dblquad(actual_xyfun, xmin, xmax, ymin, ymax)/Z
ex2 = matrix(c(x2,xy,xy,y2),2,2)
ex2 - emlasso(A,b,c) %*% t(emlasso(A,b,c))
xmin <- -Inf; xmax <- Inf
ymin <- -Inf; ymax <- Inf
actual_xfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x^2*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_yfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(y^2*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_xyfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x*y*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
# Expectation
vx = c()
vy = c()
x2 = dblquad(actual_xfun, xmin, xmax, ymin, ymax)/Z
y2 = dblquad(actual_yfun, xmin, xmax, ymin, ymax)/Z
xy = dblquad(actual_xyfun, xmin, xmax, ymin, ymax)/Z
print(ex2 = matrix(c(x2,xy,xy,y2),2,2))
xmin <- -Inf; xmax <- Inf
ymin <- -Inf; ymax <- Inf
actual_xfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x^2*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_yfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(y^2*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
actual_xyfun <- function(x,y)
{
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
return(x*y*exp((-0.5*(A[1,1]*x^2+(A[1,2]+A[2,1])*x*y+A[2,2]*y^2) + b[1]*x + b[2]*y -  c*abs(x)-c*abs(y))))
}
# Expectation
vx = c()
vy = c()
x2 = dblquad(actual_xfun, xmin, xmax, ymin, ymax)/Z
y2 = dblquad(actual_yfun, xmin, xmax, ymin, ymax)/Z
xy = dblquad(actual_xyfun, xmin, xmax, ymin, ymax)/Z
ex2 = matrix(c(x2,xy,xy,y2),2,2)
print(ex2)
print(ex2 - emlasso(A,b,c) %*% t(emlasso(A,b,c)))
A = matrix(c(2,0,0,3),2,2)
b = matrix(c(-2,-1),2,1)
c = 3
source(here("code","lasso_distribution","Multi-Lasso.R"))
Z = zmlasso(A,b,c)
vmlasso(A,b,c)
