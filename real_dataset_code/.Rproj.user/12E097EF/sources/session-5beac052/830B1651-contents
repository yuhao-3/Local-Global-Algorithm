---
title: "Test hyper-g/n"
output: html_document
date: '2022-04-30'
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
 
```{r}
library(here)
source(here("r_code","solve_polynomial.R"))
source(here("r_code","univariate_integration.R"))
source(here("r_code","log_bf_hyper_g_on_n.R"))
source(here("r_code","log_appell.R"))
```

```{r}
a  <- 3
R2 <- 0.2
p  <- 10
n  <- 50

f_g_on_n_plot(n,p,R2,a,N=1000,n_sd=2)
```


```{r}
N <- 500
vR2 <- seq(0.01,0.9,length=N)
vn <- rep(n,N)
vp <- rep(p,N)
```

### Slow brute force trapezoidal integration

```{r}
n_sd <- 4
N <- 1000

log_bf3_trap <- log_bf_hyper_g_on_n_trapint(vn,vp,vR2,a, N=N, n_sd=n_sd ) 
log_bf3_trap
```

### Using the appell package

```{r}
#library(devtools)
#install_version("appell", version = "0.0-4", repos = "http://cran.us.r-project.org")

library(appell)

#library(profvis)
#l <- profvis({
  log_bf_appell_1 <- log_bf_hyper_g_on_n_appell(vn,vp,vR2,a, flag=1) 
  log_bf_appell_2 <- log_bf_hyper_g_on_n_appell(vn,vp,vR2,a, flag=2)
#  log_bf_appell_15 <- log_bf_hyper_g_on_n_appell(vn,vp,vR2,a, flag=15) 
#  log_bf_appell_16 <- log_bf_hyper_g_on_n_appell(vn,vp,vR2,a, flag=16)
#  log_bf_appell_17 <- log_bf_hyper_g_on_n_appell(vn,vp,vR2,a, flag=17)
#})

# log_bf_appell_21 <- log_bf_hyper_g_on_n_appell(vn,vp,vR2,a, flag=21) 
# log_bf_appell_22 <- log_bf_hyper_g_on_n_appell(vn,vp,vR2,a, flag=22)
# log_bf_appell_23 <- log_bf_hyper_g_on_n_appell(vn,vp,vR2,a, flag=23)
# log_bf_appell_24 <- log_bf_hyper_g_on_n_appell(vn,vp,vR2,a, flag=24) 
# log_bf_appell_25 <- log_bf_hyper_g_on_n_appell(vn,vp,vR2,a, flag=25)
# log_bf_appell_26 <- log_bf_hyper_g_on_n_appell(vn,vp,vR2,a, flag=26)
# log_bf_appell_27 <- log_bf_hyper_g_on_n_appell(vn,vp,vR2,a, flag=27) 
# log_bf_appell_28 <- log_bf_hyper_g_on_n_appell(vn,vp,vR2,a, flag=28)
# log_bf_appell_29 <- log_bf_hyper_g_on_n_appell(vn,vp,vR2,a, flag=29)
# log_bf_appell_30 <- log_bf_hyper_g_on_n_appell(vn,vp,vR2,a, flag=30)


``` 

### New function that approximates the appell function on log scale

```{r}
d <- length(vn) 
vA <- rep(1,d)
vB1 <- rep(a/2,d)
vB2 <- 0.5*(vn-1)
vC <- 0.5*(vp+a)
vx <- 1-1/vn
vy <- vR2

#library(devtools)
#install_version("lineprof", version = "0.0-4", repos = "http://cran.us.r-project.org")

#library(profvis)
#l <- profvis({
#time_val <- system.time({
  vI <- log(a - 2) - log(vn) - log(vp + a - 2) + log_appell(vA, vB1, vB2, vC, vx, vy)
#})

#l
```


```{r}
mat <- cbind(
             log_bf_appell_1,
      log_bf_appell_2,
      log_bf3_trap,
      vI
)

plot(NA,type="n", 
     xlim=range(vR2), 
     ylim=range(mat, na.rm = TRUE),
     xlab="R2",
     ylab="log BF")

for (i in 1:ncol(mat)) {
  lines(vR2, mat[,i], col=i)
}
```