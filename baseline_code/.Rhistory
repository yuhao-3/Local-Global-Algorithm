# Calculate variance of lasso distribution
var_uni_lasso <- function(mu1,mu2,sigma,Z)
{
var = second_mom_uni_lasso(mu1,mu2,sigma,Z) -(mean_uni_lasso(mu1,mu2,sigma,Z))^2
return(var)
}
#################################  Positive Truncated Norm ##################################
# Calculate expectation of truncated normal distribution
pos_tru_exp <- function(mu,sigma)
{
return(mu + sigma*xsi_1(mu/sigma))
}
# Calculate second moment of truncated normal distribution
pos_tru_sec_mom <- function(mu,sigma)
{
return(sigma^2*(1+xsi_2(mu/sigma)) +(mu + sigma * xsi_1(mu/sigma))^2)
}
# xsi 1 function
xsi_1<- function(t)
{
return(dnorm(t)/pnorm(t))
}
# xsi 2 function
xsi_2<- function(t)
{
return(-t*xsi_1(t) - xsi_1(t)^2)
}
calculate_uni_lasso_param(1,2,3)
f = function(x)
{
a=1
b=2
c=3
return(exp(-0.5*a*x^2+b*x-c*abs(x)))
}
exp = function(x)
{
a=1
b=2
c=3
return(x*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
sec_mom = function(x)
{
a=1
b=2
c=3
return(x^2*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
integrate(sec_mom,-100,100)
integrate(sec_mom,-10,10)
integrate(sec_mom,-1,1)
integrate(f,-1,1)
integrate(f,-1,1)
integrate(f,-1,1)
integrate(f,-1,1)
integrate(f)
integrate(f,-1,1)
print(st_geometry(world)
)
find("f")
f(2)
f(2)
set.seed(10)
library(lars)
library("Matrix")
data("diabetes")
f = function(x)
{
a=1
b=2
c=3
return(exp(-0.5*a*x^2+b*x-c*abs(x)))
}
exp = function(x)
{
a=1
b=2
c=3
return(x*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
sec_mom = function(x)
{
a=1
b=2
c=3
return(x^2*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
f = function(x)
{
a=1
b=2
c=3
return(exp(-0.5*a*x^2+b*x-c*abs(x)))
}
expect = function(x)
{
a=1
b=2
c=3
return(x*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
sec_mom = function(x)
{
a=1
b=2
c=3
return(x^2*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
f = function(x)
{
a=1
b=2
c=3
return(exp(-0.5*a*x^2+b*x-c*abs(x)))
}
expect = function(x)
{
a=1
b=2
c=3
return(x*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
sec_mom = function(x)
{
a=1
b=2
c=3
return(x^2*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
integrate(sec_mom,-10,10)
f = function(x)
{
a=1
b=2
c=3
return(exp(-0.5*a*x^2+b*x-c*abs(x)))
}
expect = function(x)
{
a=1
b=2
c=3
return(x*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
sec_mom = function(x)
{
a=1
b=2
c=3
return(x^2*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
integrate(sec_mom,-10,10)
set.seed(10)
library(lars)
library("Matrix")
data("diabetes")
f = function(x)
{
a=1
b=2
c=3
return(exp(-0.5*a*x^2+b*x-c*abs(x)))
}
expect = function(x)
{
a=1
b=2
c=3
return(x*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
sec_mom = function(x)
{
a=1
b=2
c=3
return(x^2*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
integrate(f,-10,10)
integrate(expect,-10,10)
integrate(sec_mom,-10,10)
0.3243698/0.8484876
0.3822917 - 0.3634242^2
integrate(f,-10,10)$
value
Z = integrate(f,-10,10)$value
exp = integrate(expect,-10,10)$value / Z
sec_mom = integrate(sec_mom,-10,10)$value / Z
var = sec_mom - exp^2
Z = integrate(f,-10,10)$value
exp = integrate(expect,-10,10)$value / Z
sec_mom = integrate(sec_mom,-10,10)$value / Z
f = function(x)
{
a=1
b=2
c=3
return(exp(-0.5*a*x^2+b*x-c*abs(x)))
}
expect = function(x)
{
a=1
b=2
c=3
return(x*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
sec_mom = function(x)
{
a=1
b=2
c=3
return(x^2*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
Z = integrate(f,-10,10)$value
exp = integrate(expect,-10,10)$value / Z
sec_mom = integrate(sec_mom,-10,10)$value / Z
var = sec_mom - exp^2
Z
exp
var
Z = integrate(f,a,b,c,-10,10)$value
Z = integrate(f,-10,10)$value
exp = integrate(expect,-10,10)$value / Z
sec_mom = integrate(sec_mom,-10,10)$value / Z
f = function(x,a,b,c)
{
a=1
b=2
c=3
return(exp(-0.5*a*x^2+b*x-c*abs(x)))
}
expect = function(x)
{
a=1
b=2
c=3
return(x*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
sec_mom = function(x)
{
a=1
b=2
c=3
return(x^2*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
Z = integrate(f,-10,10)$value
exp = integrate(expect,-10,10)$value / Z
sec_mom = integrate(sec_mom,-10,10)$value / Z
var = sec_mom - exp^2
Z
exp
var
a = 20
b = 4
exp(log(a+b))
exp(log(a-b))
exp(log(a/b))
exp(log(a)-log(b))
###################  UNIVARIATE LASSO DISTRIBUTION ###############################
calculate_uni_lasso_param <- function(a,b,c)
{
mu1 = (b-c)/a
mu2 = -(c+b)/a
sigma2 = 1/a
Z = norm_const_lasso(mu1,mu2,sqrt(sigma2))
mu = mean_uni_lasso(mu1,mu2,sqrt(sigma2),Z)
var = var_uni_lasso(mu1,mu2,sqrt(sigma2),Z)
return(list(mu = mu,var = var, Z = Z))
}
# Calculate normalizing constant
norm_const_lasso <- function(mu1,mu2,sigma)
{
# Log trick
Z = sigma*(pnorm(mu1/sigma)/dnorm(mu1/sigma) + pnorm(mu2/sigma)/dnorm(mu2/sigma))
return(Z)
}
# Calculate expectation of lasso distribution
mean_uni_lasso <- function(mu1,mu2,sigma,Z)
{
part1 = pnorm(mu1/sigma)/dnorm(mu1/sigma)*pos_tru_exp(mu1,sigma)
part2 = pnorm(mu2/sigma)/dnorm(mu2/sigma)*pos_tru_exp(mu2,sigma)
mean = sigma/Z *(part1 - part2 )
return(mean)
}
# Calculate second moment of lasso distribution
second_mom_uni_lasso = function(mu1,mu2,sigma,Z)
{
part1 = pnorm(mu1/sigma)/dnorm(mu1/sigma)*pos_tru_sec_mom(mu1,sigma)
part2 = pnorm(mu2/sigma)/dnorm(mu2/sigma)*pos_tru_sec_mom(mu2,sigma)
sec_mom = sigma/Z *(part1 + part2 )
return(sec_mom)
}
# Calculate variance of lasso distribution
var_uni_lasso <- function(mu1,mu2,sigma,Z)
{
var = second_mom_uni_lasso(mu1,mu2,sigma,Z) -(mean_uni_lasso(mu1,mu2,sigma,Z))^2
return(var)
}
#################################  Positive Truncated Norm ##################################
# Calculate expectation of truncated normal distribution
pos_tru_exp <- function(mu,sigma)
{
return(mu + sigma*xsi_1(mu/sigma))
}
# Calculate second moment of truncated normal distribution
pos_tru_sec_mom <- function(mu,sigma)
{
return(sigma^2*(1+xsi_2(mu/sigma)) +(mu + sigma * xsi_1(mu/sigma))^2)
}
# xsi 1 function
xsi_1<- function(t)
{
return(dnorm(t)/pnorm(t))
}
# xsi 2 function
xsi_2<- function(t)
{
return(-t*xsi_1(t) - xsi_1(t)^2)
}
###################  UNIVARIATE LASSO DISTRIBUTION ###############################
calculate_uni_lasso_param <- function(a,b,c)
{
mu1 = exp(log(b-c)-log(a))
mu2 = exp(log(-(c+b))-log(a))
sigma2 = exp(-log(a))
Z = norm_const_lasso(mu1,mu2,sqrt(sigma2))
mu = mean_uni_lasso(mu1,mu2,sqrt(sigma2),Z)
var = var_uni_lasso(mu1,mu2,sqrt(sigma2),Z)
return(list(mu = mu,var = var, Z = Z))
}
# Calculate normalizing constant
norm_const_lasso <- function(mu1,mu2,sigma)
{
# Log trick
Z = sigma*(pnorm(exp(log(mu1)-log(sigma)))/dnorm(exp(log(mu1)-log(sigma))) + pnorm(exp(log(mu2)-log(sigma)))/dnorm(exp(log(mu2)-log(sigma))))
return(Z)
}
# Calculate expectation of lasso distribution
mean_uni_lasso <- function(mu1,mu2,sigma,Z)
{
part1 = pnorm(exp(log(mu1)-log(sigma)))/dnorm(exp(log(mu1)-log(sigma)))*pos_tru_exp(mu1,sigma)
part2 = pnorm(exp(log(mu2)-log(sigma)))/dnorm(exp(log(mu2)-log(sigma)))*pos_tru_exp(mu2,sigma)
mean = sigma/Z *(part1 - part2 )
return(mean)
}
# Calculate second moment of lasso distribution
second_mom_uni_lasso = function(mu1,mu2,sigma,Z)
{
part1 = pnorm(exp(log(mu1)-log(sigma)))/dnorm(exp(log(mu1)-log(sigma)))*pos_tru_sec_mom(mu1,sigma)
part2 = pnorm(exp(log(mu2)-log(sigma)))/dnorm(exp(log(mu2)-log(sigma)))*pos_tru_sec_mom(mu2,sigma)
sec_mom = sigma/Z *(part1 + part2 )
return(sec_mom)
}
# Calculate variance of lasso distribution
var_uni_lasso <- function(mu1,mu2,sigma,Z)
{
var = second_mom_uni_lasso(mu1,mu2,sigma,Z) -(mean_uni_lasso(mu1,mu2,sigma,Z))^2
return(var)
}
#################################  Positive Truncated Norm ##################################
# Calculate expectation of truncated normal distribution
pos_tru_exp <- function(mu,sigma)
{
return(mu + sigma*xsi_1(exp(log(mu)-log(sigma))))
}
# Calculate second moment of truncated normal distribution
pos_tru_sec_mom <- function(mu,sigma)
{
return(sigma^2*(1+xsi_2(exp(log(mu)-log(sigma)))) +(mu + sigma * xsi_1(exp(log(mu)-log(sigma))))^2)
}
# xsi 1 function
xsi_1<- function(t)
{
return(exp(log(dnorm(t))-log(pnorm(t))))
}
# xsi 2 function
xsi_2<- function(t)
{
return(-t*xsi_1(t) - xsi_1(t)^2)
}
calculate_uni_lasso_param(1,2,3)
###################  UNIVARIATE LASSO DISTRIBUTION ###############################
calculate_uni_lasso_param <- function(a,b,c)
{
mu1 = exp(log(b-c)-log(a))
mu2 = exp(log(-(c+b))-log(a))
sigma2 = exp(-log(a))
print(mu1)
Z = norm_const_lasso(mu1,mu2,sqrt(sigma2))
mu = mean_uni_lasso(mu1,mu2,sqrt(sigma2),Z)
var = var_uni_lasso(mu1,mu2,sqrt(sigma2),Z)
return(list(mu = mu,var = var, Z = Z))
}
# Calculate normalizing constant
norm_const_lasso <- function(mu1,mu2,sigma)
{
# Log trick
Z = sigma*(pnorm(exp(log(mu1)-log(sigma)))/dnorm(exp(log(mu1)-log(sigma))) + pnorm(exp(log(mu2)-log(sigma)))/dnorm(exp(log(mu2)-log(sigma))))
return(Z)
}
# Calculate expectation of lasso distribution
mean_uni_lasso <- function(mu1,mu2,sigma,Z)
{
part1 = pnorm(exp(log(mu1)-log(sigma)))/dnorm(exp(log(mu1)-log(sigma)))*pos_tru_exp(mu1,sigma)
part2 = pnorm(exp(log(mu2)-log(sigma)))/dnorm(exp(log(mu2)-log(sigma)))*pos_tru_exp(mu2,sigma)
mean = sigma/Z *(part1 - part2 )
return(mean)
}
# Calculate second moment of lasso distribution
second_mom_uni_lasso = function(mu1,mu2,sigma,Z)
{
part1 = pnorm(exp(log(mu1)-log(sigma)))/dnorm(exp(log(mu1)-log(sigma)))*pos_tru_sec_mom(mu1,sigma)
part2 = pnorm(exp(log(mu2)-log(sigma)))/dnorm(exp(log(mu2)-log(sigma)))*pos_tru_sec_mom(mu2,sigma)
sec_mom = sigma/Z *(part1 + part2 )
return(sec_mom)
}
# Calculate variance of lasso distribution
var_uni_lasso <- function(mu1,mu2,sigma,Z)
{
var = second_mom_uni_lasso(mu1,mu2,sigma,Z) -(mean_uni_lasso(mu1,mu2,sigma,Z))^2
return(var)
}
#################################  Positive Truncated Norm ##################################
# Calculate expectation of truncated normal distribution
pos_tru_exp <- function(mu,sigma)
{
return(mu + sigma*xsi_1(exp(log(mu)-log(sigma))))
}
# Calculate second moment of truncated normal distribution
pos_tru_sec_mom <- function(mu,sigma)
{
return(sigma^2*(1+xsi_2(exp(log(mu)-log(sigma)))) +(mu + sigma * xsi_1(exp(log(mu)-log(sigma))))^2)
}
# xsi 1 function
xsi_1<- function(t)
{
return(exp(log(dnorm(t))-log(pnorm(t))))
}
# xsi 2 function
xsi_2<- function(t)
{
return(-t*xsi_1(t) - xsi_1(t)^2)
}
calculate_uni_lasso_param(1,2,3)
###################  UNIVARIATE LASSO DISTRIBUTION ###############################
calculate_uni_lasso_param <- function(a,b,c)
{
mu1 = (b-c)/a
mu2 = -(c+b)/a
sigma2 = 1/a
Z = norm_const_lasso(mu1,mu2,sqrt(sigma2))
mu = mean_uni_lasso(mu1,mu2,sqrt(sigma2),Z)
var = var_uni_lasso(mu1,mu2,sqrt(sigma2),Z)
return(list(mu = mu,var = var, Z = Z))
}
# Calculate normalizing constant
norm_const_lasso <- function(mu1,mu2,sigma)
{
# Log trick
Z = sigma*(pnorm(mu1/sigma)/dnorm(mu1/sigma) + pnorm(mu2/sigma)/dnorm(mu2/sigma))
return(Z)
}
# Calculate expectation of lasso distribution
mean_uni_lasso <- function(mu1,mu2,sigma,Z)
{
part1 = pnorm(mu1/sigma)/dnorm(mu1/sigma)*pos_tru_exp(mu1,sigma)
part2 = pnorm(mu2/sigma)/dnorm(mu2/sigma)*pos_tru_exp(mu2,sigma)
mean = sigma/Z *(part1 - part2 )
return(mean)
}
# Calculate second moment of lasso distribution
second_mom_uni_lasso = function(mu1,mu2,sigma,Z)
{
part1 = pnorm(mu1/sigma)/dnorm(mu1/sigma)*pos_tru_sec_mom(mu1,sigma)
part2 = pnorm(mu2/sigma)/dnorm(mu2/sigma)*pos_tru_sec_mom(mu2,sigma)
sec_mom = sigma/Z *(part1 + part2 )
return(sec_mom)
}
# Calculate variance of lasso distribution
var_uni_lasso <- function(mu1,mu2,sigma,Z)
{
var = second_mom_uni_lasso(mu1,mu2,sigma,Z) -(mean_uni_lasso(mu1,mu2,sigma,Z))^2
return(var)
}
#################################  Positive Truncated Norm ##################################
# Calculate expectation of truncated normal distribution
pos_tru_exp <- function(mu,sigma)
{
return(mu + sigma*xsi_1(mu/sigma))
}
# Calculate second moment of truncated normal distribution
pos_tru_sec_mom <- function(mu,sigma)
{
return(sigma^2*(1+xsi_2(mu/sigma)) +(mu + sigma * xsi_1(mu/sigma))^2)
}
# xsi 1 function
xsi_1<- function(t)
{
return(dnorm(t)/pnorm(t))
}
# xsi 2 function
xsi_2<- function(t)
{
return(-t*xsi_1(t) - xsi_1(t)^2)
}
calculate_uni_lasso_param(1,2,3)
log(-1)-log(2)
exp(log(|-1|)-log(2))
exp(log(abs(-1))-log(2))
a = matrix(c(1,2,3,4),2,2)
b = matrix(c(1),1,1)
a+b
