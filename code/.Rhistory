# Calculate variance of lasso distribution
var_uni_lasso <- function(mu1,mu2,sigma,Z)
{
var = second_mom_uni_lasso(mu1,mu2,sigma,Z) -(mean_uni_lasso(mu1,mu2,sigma,Z))^2
return(var)
}
#############  Positive Truncated Norm $###################
# Calculate expectation of truncated normal distribution
pos_tru_exp <- function(mu,sigma)
{
return(mu + sigma*xsi_1(mu/sigma))
}
# Calculate second moment of truncated normal distribution
pos_tru_sec_mom <- function(mu,sigma)
{
print((mu + sigma * xsi_1(mu/sigma)))
return(sigma^2*(1+xsi_2(mu/sigma)) +(mu + sigma * xsi_1(mu/sigma))^2)
}
# xsi 1 function
xsi_1<- function(t)
{
return(dnorm(t)/pnorm(t))
}
# xsi 2 function
xsi_2<- function(t)
{
return(-t*xsi_1(t) - xsi_1(t)^2)
}
calculate_lasso_param(1,2,3)
1/0.8484876 *(pnorm(-1)/dnorm(-1)*0.5251353 - pnorm(-5)/dnorm(-5)*0.186504)
1*(1+xsi_2(-1)) + 0.5251353^2
1/0.8484876 *(pnorm(-1)/dnorm(-1)*0.4748647 + pnorm(-5)/dnorm(-5)*0.06748018)
0.3822917 - 0.3634243^2
calculate_lasso_param(1,2,3)
?integrate
f = exp(-0.5*a*x^2+b*x-c*abs(x))
a = 1
b = 2
c = 3
f = exp(-0.5*a*x^2+b*x-c*abs(x))
f = function(x)
{ a=1
b =2
c=3
return(exp(-0.5*a*x^2+b*x-c*abs(x)))}
integrate(f)
integrate(f,-infty,infty)
infty
integrate(f,-inf,inf)
inf
inf(a)
integrate(f,-9999,9999)
integrate(f,-99,99)
integrate(f,-999,999)
integrate(f,-10,10)
f
f
function(x)
{ a=1
b =2
c=3
return(x*exp(-0.5*a*x^2+b*x-c*abs(x)))}
integrate(f,-10,10)
integrate(f,-100,100)
# xsi 2 function
xsi_2<- function(t)
{
return(-t*xsi_1(t) - xsi_1(t)^2)
}
```
calculate_uni_lasso_param(1,2,3)
###################  UNIVARIATE LASSO DISTRIBUTION ###############################
calculate_uni_lasso_param <- function(a,b,c)
{
mu1 = (b-c)/a
mu2 = -(c+b)/a
sigma2 = 1/a
Z = norm_const_lasso(mu1,mu2,sqrt(sigma2))
mu = mean_uni_lasso(mu1,mu2,sqrt(sigma2),Z)
var = var_uni_lasso(mu1,mu2,sqrt(sigma2),Z)
return(list(mu = mu,var = var, Z = Z))
}
# Calculate normalizing constant
norm_const_lasso <- function(mu1,mu2,sigma)
{
# Log trick
Z = sigma*(pnorm(mu1/sigma)/dnorm(mu1/sigma) + pnorm(mu2/sigma)/dnorm(mu2/sigma))
return(Z)
}
# Calculate expectation of lasso distribution
mean_uni_lasso <- function(mu1,mu2,sigma,Z)
{
part1 = pnorm(mu1/sigma)/dnorm(mu1/sigma)*pos_tru_exp(mu1,sigma)
part2 = pnorm(mu2/sigma)/dnorm(mu2/sigma)*pos_tru_exp(mu2,sigma)
mean = sigma/Z *(part1 - part2 )
return(mean)
}
# Calculate second moment of lasso distribution
second_mom_uni_lasso = function(mu1,mu2,sigma,Z)
{
part1 = pnorm(mu1/sigma)/dnorm(mu1/sigma)*pos_tru_sec_mom(mu1,sigma)
part2 = pnorm(mu2/sigma)/dnorm(mu2/sigma)*pos_tru_sec_mom(mu2,sigma)
sec_mom = sigma/Z *(part1 + part2 )
return(sec_mom)
}
# Calculate variance of lasso distribution
var_uni_lasso <- function(mu1,mu2,sigma,Z)
{
var = second_mom_uni_lasso(mu1,mu2,sigma,Z) -(mean_uni_lasso(mu1,mu2,sigma,Z))^2
return(var)
}
#################################  Positive Truncated Norm ##################################
# Calculate expectation of truncated normal distribution
pos_tru_exp <- function(mu,sigma)
{
return(mu + sigma*xsi_1(mu/sigma))
}
# Calculate second moment of truncated normal distribution
pos_tru_sec_mom <- function(mu,sigma)
{
print((mu + sigma * xsi_1(mu/sigma)))
return(sigma^2*(1+xsi_2(mu/sigma)) +(mu + sigma * xsi_1(mu/sigma))^2)
}
# xsi 1 function
xsi_1<- function(t)
{
return(dnorm(t)/pnorm(t))
}
# xsi 2 function
xsi_2<- function(t)
{
return(-t*xsi_1(t) - xsi_1(t)^2)
}
calculate_uni_lasso_param(1,2,3)
###################  UNIVARIATE LASSO DISTRIBUTION ###############################
calculate_uni_lasso_param <- function(a,b,c)
{
mu1 = (b-c)/a
mu2 = -(c+b)/a
sigma2 = 1/a
Z = norm_const_lasso(mu1,mu2,sqrt(sigma2))
mu = mean_uni_lasso(mu1,mu2,sqrt(sigma2),Z)
var = var_uni_lasso(mu1,mu2,sqrt(sigma2),Z)
return(list(mu = mu,var = var, Z = Z))
}
# Calculate normalizing constant
norm_const_lasso <- function(mu1,mu2,sigma)
{
# Log trick
Z = sigma*(pnorm(mu1/sigma)/dnorm(mu1/sigma) + pnorm(mu2/sigma)/dnorm(mu2/sigma))
return(Z)
}
# Calculate expectation of lasso distribution
mean_uni_lasso <- function(mu1,mu2,sigma,Z)
{
part1 = pnorm(mu1/sigma)/dnorm(mu1/sigma)*pos_tru_exp(mu1,sigma)
part2 = pnorm(mu2/sigma)/dnorm(mu2/sigma)*pos_tru_exp(mu2,sigma)
mean = sigma/Z *(part1 - part2 )
return(mean)
}
# Calculate second moment of lasso distribution
second_mom_uni_lasso = function(mu1,mu2,sigma,Z)
{
part1 = pnorm(mu1/sigma)/dnorm(mu1/sigma)*pos_tru_sec_mom(mu1,sigma)
part2 = pnorm(mu2/sigma)/dnorm(mu2/sigma)*pos_tru_sec_mom(mu2,sigma)
sec_mom = sigma/Z *(part1 + part2 )
return(sec_mom)
}
# Calculate variance of lasso distribution
var_uni_lasso <- function(mu1,mu2,sigma,Z)
{
var = second_mom_uni_lasso(mu1,mu2,sigma,Z) -(mean_uni_lasso(mu1,mu2,sigma,Z))^2
return(var)
}
#################################  Positive Truncated Norm ##################################
# Calculate expectation of truncated normal distribution
pos_tru_exp <- function(mu,sigma)
{
return(mu + sigma*xsi_1(mu/sigma))
}
# Calculate second moment of truncated normal distribution
pos_tru_sec_mom <- function(mu,sigma)
{
return(sigma^2*(1+xsi_2(mu/sigma)) +(mu + sigma * xsi_1(mu/sigma))^2)
}
# xsi 1 function
xsi_1<- function(t)
{
return(dnorm(t)/pnorm(t))
}
# xsi 2 function
xsi_2<- function(t)
{
return(-t*xsi_1(t) - xsi_1(t)^2)
}
calculate_uni_lasso_param(1,2,3)
integrate(f,-100,100)
f
f = function(x)
{
a=1
b =2
c=3
return(exp(-0.5*a*x^2+b*x-c*abs(x)))
}
integrate(f,-100,100)
f = function(x)
{
a=1
b =2
c=3
return(x*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
integrate(f,-100,100)
integrate(f,-100,100)/0.8484876
integrate(f,-100,100)
0.308361//0.8484876
0.308361/0.8484876
f = function(x)
{
a=1
b =2
c=3
return(exp(-0.5*a*x^2+b*x-c*abs(x)))
}
exp = function(x)
{
a=1
b =2
c=3
return(x*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
var = function(x)
{
a=1
b=2
c=3
return(x^2*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
integrate(f,-100,100)
integrate(exp,-100,100)
integrate(var,-100,100)
integrate(f,-100,100)
f = function(x)
{
a=1
b =2
c=3
return(exp(-0.5*a*x^2+b*x-c*abs(x)))
}
exp = function(x)
{
a=1
b =2
c=3
return(x*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
var = function(x)
{
a=1
b=2
c=3
return(x^2*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
integrate(f,-100,100)
f = function(x)
{
a=1
b =2
c=3
return(exp(-0.5*a*x^2+b*x-c*abs(x)))
}
exp = function(x)
{
a=1
b =2
c=3
return(x*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
var = function(x)
{
a=1
b=2
c=3
return(x^2*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
integrate(f,-100,100)
f = function(x)
{
a=1
b =2
c=3
return(exp(-0.5*a*x^2+b*x-c*abs(x)))
}
integrate(f,-100,100)
integrate(f,-100,100)
integrate(f,-100,100)
f = function(x)
{
a=1
b=2
c=3
return(exp(-0.5*a*x^2+b*x-c*abs(x)))
}
exp = function(x)
{
a=1
b=2
c=3
return(x*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
var = function(x)
{
a=1
b=2
c=3
return(x^2*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
integrate(sec_mom,-100,100)
f = function(x)
{
a=1
b=2
c=3
return(exp(-0.5*a*x^2+b*x-c*abs(x)))
}
exp = function(x)
{
a=1
b=2
c=3
return(x*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
sec_mom = function(x)
{
a=1
b=2
c=3
return(x^2*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
integrate(sec_mom,-100,100)
integrate(f,-100,100)
calculate_uni_lasso_param(1,2,3)
set.seed(10)
library(lars)
library("Matrix")
data("diabetes")
###################  UNIVARIATE LASSO DISTRIBUTION ###############################
calculate_uni_lasso_param <- function(a,b,c)
{
mu1 = (b-c)/a
mu2 = -(c+b)/a
sigma2 = 1/a
Z = norm_const_lasso(mu1,mu2,sqrt(sigma2))
mu = mean_uni_lasso(mu1,mu2,sqrt(sigma2),Z)
var = var_uni_lasso(mu1,mu2,sqrt(sigma2),Z)
return(list(mu = mu,var = var, Z = Z))
}
# Calculate normalizing constant
norm_const_lasso <- function(mu1,mu2,sigma)
{
# Log trick
Z = sigma*(pnorm(mu1/sigma)/dnorm(mu1/sigma) + pnorm(mu2/sigma)/dnorm(mu2/sigma))
return(Z)
}
# Calculate expectation of lasso distribution
mean_uni_lasso <- function(mu1,mu2,sigma,Z)
{
part1 = pnorm(mu1/sigma)/dnorm(mu1/sigma)*pos_tru_exp(mu1,sigma)
part2 = pnorm(mu2/sigma)/dnorm(mu2/sigma)*pos_tru_exp(mu2,sigma)
mean = sigma/Z *(part1 - part2 )
return(mean)
}
# Calculate second moment of lasso distribution
second_mom_uni_lasso = function(mu1,mu2,sigma,Z)
{
part1 = pnorm(mu1/sigma)/dnorm(mu1/sigma)*pos_tru_sec_mom(mu1,sigma)
part2 = pnorm(mu2/sigma)/dnorm(mu2/sigma)*pos_tru_sec_mom(mu2,sigma)
sec_mom = sigma/Z *(part1 + part2 )
return(sec_mom)
}
# Calculate variance of lasso distribution
var_uni_lasso <- function(mu1,mu2,sigma,Z)
{
var = second_mom_uni_lasso(mu1,mu2,sigma,Z) -(mean_uni_lasso(mu1,mu2,sigma,Z))^2
return(var)
}
#################################  Positive Truncated Norm ##################################
# Calculate expectation of truncated normal distribution
pos_tru_exp <- function(mu,sigma)
{
return(mu + sigma*xsi_1(mu/sigma))
}
# Calculate second moment of truncated normal distribution
pos_tru_sec_mom <- function(mu,sigma)
{
return(sigma^2*(1+xsi_2(mu/sigma)) +(mu + sigma * xsi_1(mu/sigma))^2)
}
# xsi 1 function
xsi_1<- function(t)
{
return(dnorm(t)/pnorm(t))
}
# xsi 2 function
xsi_2<- function(t)
{
return(-t*xsi_1(t) - xsi_1(t)^2)
}
calculate_uni_lasso_param(1,2,3)
f = function(x)
{
a=1
b=2
c=3
return(exp(-0.5*a*x^2+b*x-c*abs(x)))
}
exp = function(x)
{
a=1
b=2
c=3
return(x*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
sec_mom = function(x)
{
a=1
b=2
c=3
return(x^2*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
integrate(sec_mom,-100,100)
integrate(sec_mom,-10,10)
integrate(sec_mom,-1,1)
integrate(f,-1,1)
integrate(f,-1,1)
integrate(f,-1,1)
integrate(f,-1,1)
integrate(f)
integrate(f,-1,1)
print(st_geometry(world)
)
find("f")
f(2)
f(2)
set.seed(10)
library(lars)
library("Matrix")
data("diabetes")
f = function(x)
{
a=1
b=2
c=3
return(exp(-0.5*a*x^2+b*x-c*abs(x)))
}
exp = function(x)
{
a=1
b=2
c=3
return(x*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
sec_mom = function(x)
{
a=1
b=2
c=3
return(x^2*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
f = function(x)
{
a=1
b=2
c=3
return(exp(-0.5*a*x^2+b*x-c*abs(x)))
}
expect = function(x)
{
a=1
b=2
c=3
return(x*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
sec_mom = function(x)
{
a=1
b=2
c=3
return(x^2*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
f = function(x)
{
a=1
b=2
c=3
return(exp(-0.5*a*x^2+b*x-c*abs(x)))
}
expect = function(x)
{
a=1
b=2
c=3
return(x*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
sec_mom = function(x)
{
a=1
b=2
c=3
return(x^2*exp(-0.5*a*x^2+b*x-c*abs(x)))
}
integrate(sec_mom,-10,10)
